// vim: set syntax=groovy sw=4 sts=4 ts=8 et:
// -*- tab-width:8; indent-tabs-mode:nil; c-basic-offset:4; -*-
/*
 * Copyright (c)
 *   2023 FAU -- Joachim Falk <joachim.falk@fau.de>
 *
 * This program is free software; you can redistribute it and/or modify it under
 * the terms of the GNU General Public License as published by the Free Software
 * Foundation; either version 2 of the License, or (at your option) any later
 * version.
 *
 * This program is distributed in the hope that it will be useful, but WITHOUT
 * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS
 * FOR A PARTICULAR PURPOSE.  See the GNU General Public License for more
 * details.
 *
 * You should have received a copy of the GNU General Public License along with
 * this program; if not, write to the Free Software Foundation, Inc., 59 Temple
 * Place, Suite 330, Boston, MA 02111-1307 USA.
 */

plugins {
    id 'java'
}

buildDir = 'obj-gradle'

repositories {
    mavenCentral()
    mavenLocal()
    maven {
        name "jitpack"
        url 'https://jitpack.io'
    }
}

dependencies {
    if ((rootProject.subprojects.findAll { it.name == "opendse" }).isEmpty()) {
        implementation 'com.github.JoachimFalk.dse-opendse:opendse-optimization:v1.JF9'
        implementation 'com.github.JoachimFalk.dse-opendse:opendse-realtime:v1.JF9'
    } else {
        implementation project(':opendse:opendse-optimization')
        implementation project(':opendse:opendse-realtime')
    }
    if ((rootProject.subprojects.findAll { it.name == "opt4j" }).isEmpty()) {
        implementation 'com.github.JoachimFalk.dse-opt4j:opt4j-core:v3.3.0.JF1'
    } else {
        implementation project(":opt4j:opt4j-core")
    }
}

sourceSets {
    main {
        java {
            srcDir "src/main/java"
            srcDir "${buildDir}/src/main/java"
        }
    }
}

if (rootProject.getPath() == getPath()) {
    wrapper {
        distributionType = Wrapper.DistributionType.ALL
        gradleVersion = '6.6.1'
    }

    task 'dse-dist'(dependsOn: jar, type: Jar) {
        group = "Build"
        description = "This task assembles the self-contained dse-dist.jar"
        destinationDirectory = new File(project.buildDir, 'dse-dist')
        archiveFileName = 'dse-dist.jar'
        duplicatesStrategy = DuplicatesStrategy.INCLUDE // allow duplicates
        from {
            configurations.runtimeClasspath.collect {
                it.isDirectory() ? it : zipTree(it)
            }
        }
        with jar
        manifest {
            attributes 'Main-Class': 'org.opt4j.core.start.Opt4J'
        }
    }

    task 'run'(dependsOn: 'dse-dist', type: JavaExec) {
        main = 'org.opt4j.core.start.Opt4J'
        classpath = files(tasks.'dse-dist'.archivePath)
    }
}
